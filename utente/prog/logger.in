#include <sys.h>
#include <lib.h>
#include <colors.h>

process __logger_p0 body __logger_main(0), 201, LIV_UTENTE;
process __logger_p1 body __logger_reader(0), 200, LIV_UTENTE;
process __logger_p2 body __logger_ctrl(0), 200, LIV_UTENTE;

log_msg __logger_buf;
log_msg __logger_msg;

char *__logger_sev_names[] = { "DBG", "INF", "WRN", "ERR" };
int __logger_sev_fgcol[]  = { COL_BLUE, COL_GREEN, COL_RED, COL_BLACK };
int __logger_sev_bgcol[]  = { COL_BLACK, COL_BLACK, COL_BLACK, COL_RED };

enum __logger_cmd_types { NEW_MSG, QUIT } __logger_cmd;

semaphore __logger_non_busy value 1;
semaphore __logger_new_cmd  value 0;
semaphore __logger_mutex    value 1;

void __logger_send_cmd(__logger_cmd_types cmd)
{
	sem_wait(__logger_mutex);
	sem_wait(__logger_non_busy);
	__logger_cmd = cmd;
	__logger_msg = __logger_buf;
	sem_signal(__logger_new_cmd);
	sem_signal(__logger_mutex);
}

__logger_cmd_types __logger_recv_cmd(log_msg& msg)
{
	__logger_cmd_types work;
	sem_wait(__logger_new_cmd);
	work = __logger_cmd;
	msg = __logger_msg;
	sem_signal(__logger_non_busy);
	return work;
}

bool __logger_quit = false;

process_body __logger_main(int a)
{
	__logger_cmd_types my_cmd;
	log_msg my_msg;

	if (!vterm_setresident(a)) {
		flog(LOG_WARN, "log di sistema non residente");
	}

	while (!__logger_quit) {
		my_cmd = __logger_recv_cmd(my_msg);
		switch (my_cmd) {
		case NEW_MSG:
			vterm_setcolor(a, __logger_sev_fgcol[my_msg.sev],
					  __logger_sev_bgcol[my_msg.sev]);
			printf(a, "%s %d\t%s\n", __logger_sev_names[my_msg.sev],
						 my_msg.identifier,
						 my_msg.msg);
			break;
		default:
			break;
		}
	}
	printf(a, "*** logger (main) terminato ***\n");
}

process_body __logger_reader(int a)
{

	if (resident(&__logger_buf, sizeof(__logger_buf)) < sizeof(__logger_buf))
		goto out;

	while (!__logger_quit) {
		readlog(__logger_buf);
		if (!__logger_quit) {
			__logger_send_cmd(NEW_MSG);
		}
	}

out:
	printf(a, "*** logger (reader) terminato ***\n");
}

char __logger_ctrl_buf;

process_body __logger_ctrl(int a)
{
	
	for (;;) {
		readvterm_n(a, &__logger_ctrl_buf, 1, VTERM_NOECHO);
		switch (__logger_ctrl_buf) {
		case 'Q':
			vterm_shutdown();
			delay(5);
			__logger_quit = true;
			__logger_send_cmd(QUIT);
			*(int *)0 = 1;
			break;
		default:
			break;
		}
	}
}
